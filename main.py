import asyncio
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.types import InputFile
from text import ALL_QUESTS, BOT_TEXT, PRE_QUESTS, RETARGET_QUESTIONS, MEDIA, CALL_BACK_TEXT
from buttons import keyA, keyB, keyC, keyD_1, keyD_2, keyF, inl_keyR, inl_keyR2, keyE, \
	keyG, none, inl_key_state, message_correct, inl_keyRetarget, inl_keyRetarget_shrt
from aiogram.contrib.fsm_storage.memory import MemoryStorage  # –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞ –ø–∞–º'—è—Ç—å
from aiogram.dispatcher.filters.state import StatesGroup, State  # —Å—Ç–∞–Ω
from aiogram.dispatcher import FSMContext  # –∑–∞–ø–∏—Å –∑–º—ñ–Ω–Ω–∏—Ö
from data_managment import create_table, update_table, check_retarget, update_retarget, \
	emotion_state_check, emotion_proxy, emotion_state_road
from datetime import datetime
import random
from dotenv import load_dotenv
import os

load_dotenv()  # –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –∑–∞–∫—Ä–∏—Ç–æ–≥–æ —Ñ–∞–π–ª—É
bot = Bot(token=os.getenv('TOKEN'))
INST_URL = os.getenv('INST_URL')
dp = Dispatcher(bot, storage=MemoryStorage())

class QuestStep(StatesGroup):
	emotion = State()
	emotion_description = State()
	pre_step = State()
	step1 = State()
	step2 = State()
	feedback = State()
	final = State()

async def bot_polling():
	@dp.message_handler(commands=['start'], state='*')
	async def process_start_command(message: types.Message):
		user_id, name, time = message.from_user.id, message.from_user.first_name, datetime.now().replace(microsecond=0)
		create_table(user_id, name, time)  # —Å—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞ –æ–Ω–æ–≤–ª—é—î–º–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö
		await bot.send_message(message.chat.id, f"–í—ñ—Ç–∞—é, {message.from_user.first_name}!", reply_markup=none)
		await bot.send_message(message.chat.id, BOT_TEXT['bot_description'][0])  # –±–µ—Ä–µ–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É bot_description

		await bot.send_chat_action(message.chat.id, action='typing')  # –±–æ—Ç —ñ–º—ñ—Ç—É—î –Ω–∞–ø–∏—Å–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
		await asyncio.sleep(6)

		await bot.send_message(message.chat.id, BOT_TEXT['bot_description'][1], reply_markup=keyA)
		await QuestStep.emotion.set()

	@dp.message_handler(commands=['info'], state='*')  # –æ–±—Ä–æ–±–ª—è—î–º–æ –æ—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞
	async def process_start_command(message: types.Message):
		await bot.send_message(message.chat.id, "–î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:")
		await bot.send_chat_action(message.chat.id, action='typing')  # –±–æ—Ç —ñ–º—ñ—Ç—É—î –Ω–∞–ø–∏—Å–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
		await asyncio.sleep(1)
		await bot.send_message(message.chat.id, BOT_TEXT['bot_description'][1])
		await asyncio.sleep(2)
		await bot.send_message(message.chat.id, '–ù–∞—à Instagram –¥–µ –≤–∏ –º–æ–∂–µ—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è ‚û° '
												f'<a href="{INST_URL}">–Ω–∞—à Instagram</a>', types.ParseMode.HTML)
	@dp.message_handler(commands=['donate'], state='*')  # –æ–±—Ä–æ–±–ª—è—î–º–æ –æ—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞
	async def process_start_command(message: types.Message):
		photo = 'https://drive.google.com/uc?id=1DTAk3e2FP0UWGWBxF3i4gdUnb89PVX0A'
		await bot.send_photo(message.from_user.id, photo)
		await asyncio.sleep(2)
		await bot.send_message(message.chat.id, CALL_BACK_TEXT[0], parse_mode='HTML')
	@dp.message_handler(state=QuestStep.emotion)
	async def choose_emotion(message: types.Message):
		await bot.send_message(message.chat.id, "–ü—ñ–¥–∫–∞–∂–∏, —â–æ —Ç–∏ –∑–∞—Ä–∞–∑ –≤—ñ–¥—á—É–≤–∞–µ—à? üíô", reply_markup=keyB)
		await QuestStep.emotion_description.set()

	@dp.message_handler(state=QuestStep.emotion_description)
	async def emotion_description(message: types.Message, state: FSMContext):
		emotion = message.text[:-2].lower()   # —Ñ—ñ–∫—Å—É—î–º–æ –æ–±—Ä–∞–Ω—É –µ–º–æ—Ü—ñ—é
		if emotion not in ALL_QUESTS.keys():  # –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ç–∞–∫–∞ –µ–º–æ—Ü—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ø–∏—Å–∫—É
			await bot.send_message(message.chat.id, '–ü–æ–º–∏–ª–∫–∞! –ù–∞ –∂–∞–ª—å —è –≤–º—ñ—é –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –∑ —Ç–∏–º–∏ –µ–º–æ—Ü—ñ—è–º–∏, '
													'—è–∫–∏–º –º–µ–Ω–µ –Ω–∞–≤—á–∏–≤ –∞–≤—Ç–æ—Ä ü§ñ', reply_markup=keyG)
			await QuestStep.emotion.set()
		else:
			if emotion == '—è –Ω–µ —Ä–æ–∑—É–º—ñ—é —â–æ –≤—ñ–¥—á—É–≤–∞—é':
				await bot.send_photo(message.chat.id, photo=InputFile.from_url(MEDIA[emotion][2]), reply_markup=none)
				await bot.send_chat_action(message.chat.id, action='typing')  # typing
				await asyncio.sleep(2)  # –∑–∞—Ç—Ä–∏–º–∫–∞
				message_text, markup = '–°–ø—Ä–æ–±—É—î–º–æ —Ä–æ–∑—ñ–±—Ä–∞—Ç–∏—Å—å?', keyA
			else:
				message_text, markup = '–Ø–∫ –±–∏ –≤–∏ –æ—Ü—ñ–Ω–∏–ª–∏ –∑–∞—Ä–∞–∑ —ñ–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ—Å—Ç—å –≤–∞—à–æ–≥–æ —Å—Ç–∞–Ω—É –ø–æ 10-–±–∞–ª—å–Ω—ñ–π —à–∫–∞–ª—ñ? üíô', keyC

			async with state.proxy() as data:  # –∑–∞–ø–∞–∫–æ–≤—É—î–º–æ –Ω–∞—à—ñ –∑–º—ñ–Ω–Ω—ñ —É state.proxy() (—Å–ª–æ–≤–Ω–∏–∫)
				data['step'] = 0
				data['emotion'] = emotion

			await bot.send_message(message.chat.id, PRE_QUESTS[emotion][0], reply_markup=none)
			await bot.send_chat_action(message.chat.id, action='typing')
			await asyncio.sleep(4)

			await bot.send_message(message.chat.id, message_text, reply_markup=markup)
			await QuestStep.pre_step.set()

	@dp.message_handler(state=QuestStep.pre_step)
	async def pre_step(message: types.Message, state: FSMContext):
		async with state.proxy() as data:
			try:
				step = data['step']
				emotion = data['emotion']
			except:
				step = 1
				emotion = await emotion_proxy(message.from_user.id)

			# –±–ª–æ–∫ –Ω–∞ –≤–∏–ø–∞–¥–æ–∫ —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤–æ–¥–∏—Ç—å –¥–∞–Ω—ñ –Ω–µ –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏, –∞–ª–µ —Ü–µ –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ
			if message.text.isdigit() is True:
				message.text = await message_correct(message.text)		# –≤–∏–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç

			# emotion_state - –∑–º—ñ–Ω–Ω–∞ –¥–ª—è –∑–∞–ø–∏—Å—É —Å—Ç–∞–Ω—É. –û—Å–∫—ñ–ª—å–∫–∏ –≤ —Ü—å–æ–º—É –±–ª–æ–∫—É –±–∞–≥–∞—Ç–æ –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ —é–∑–µ—Ä–∞
			# –¥–æ–≤–µ–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –æ–∫—Ä–µ–º–æ –∑–º—ñ–Ω–Ω—É –∑–∞–º—ñ—Å—Ç—å message.text
			if message.text[:-1].rstrip().isdigit() is True and 0 < int(message.text[:-1].rstrip()) < 11:
				current_state = message.text
				update_table(step, emotion, message.text, datetime.now().replace(microsecond=0), message.from_user.id)  # –æ–Ω–æ–≤–ª—é—î–º–æ –±–¥
			elif message.text == '–î–∞–≤–∞–π —Å—Ä–æ–±—É—î–º–æ  üëç':
				current_state = await emotion_state_check(step, message.from_user.id, message.text)
			else:
				current_state = '0‚ùå'  # –∑–∞–ø–∏—Å—É—î–º–æ –≤ –±–¥ 0 —è–∫—â–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —à–∞–±–ª–æ–Ω—É
				update_table(step, emotion, current_state, datetime.now().replace(microsecond=0), message.from_user.id)  # –æ–Ω–æ–≤–ª—é—î–º–æ –±–¥

			markup = keyD_1 if step == 0 else keyD_2  # –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ —Ç–µ—Ö–Ω—ñ–∫–∞ 1 —Ç–∞ —Ç–µ—Ö–Ω—ñ–∫–∞ 2 –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ –µ—Ç–∞–ø—É

			last_check = await emotion_state_check(step=step, user_id=message.from_user.id, message=message.text)  # —Å—Ç–∞–Ω –Ω–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–º—É –µ—Ç–∞–ø—ñ
			print(f'last_chek {last_check} <> current_state {current_state}, step{step}')

			if int(last_check[:-1]) != 0 and int(current_state[:-1]) > int(last_check[:-1]):
				await bot.send_message(message.chat.id, '–ù–∞–º —à–∫–æ–¥–∞ —â–æ –≤–∞—Å —Å—Ç–∞–Ω –ø–æ–≥—ñ—Ä—à–∏–≤—Å—è. üòî', reply_markup=keyG)
				await asyncio.sleep(1)
				await bot.send_message(message.chat.id, CALL_BACK_TEXT[1], reply_markup=inl_key_state)
				await QuestStep.emotion.set()
			else:
				step = int(step) + 1 if step != 2 else step
				data['step'] = step
				data['emotion'] = emotion
				await bot.send_message(message.chat.id, PRE_QUESTS[emotion][step], reply_markup=markup, parse_mode='HTML')
				await QuestStep.step1.set() if step == 1 else await QuestStep.step2.set()  # –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—É

	@dp.message_handler(state=QuestStep.step1)  # –≤–ø—Ä–∞–≤–∞ 1
	async def step1(message: types.Message, state: FSMContext):  # 1 –∫–≤–µ—Å—Ç
		async with state.proxy() as data:  # —Ä–æ–∑–ø–∞–∫–æ–≤—É—î–º–æ –Ω–∞—à—ñ –∑–º—ñ–Ω–Ω—ñ
			emotions = data['emotion']
			step = data['step']

		photo = MEDIA[emotions][0]  # –æ–±–∏—Ä–∞—î–º–æ –ø–æ—Ç—Ä—ñ–±–Ω–µ —Ñ–æ—Ç–æ –ø—ñ–¥ —ñ–Ω–¥–µ–∫—Å–æ–º(0) –∑—ñ —Å–ª–æ–≤–Ω–∏–∫–∞
		await bot.send_photo(message.chat.id, photo=InputFile.from_url(photo), reply_markup=none)
		await bot.send_chat_action(message.chat.id, action='typing')
		await asyncio.sleep(2)

		await bot.send_message(message.chat.id, ALL_QUESTS[emotions][step], reply_markup=keyF)  # –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è 1
		await QuestStep.pre_step.set() if emotions == '—è –Ω–µ —Ä–æ–∑—É–º—ñ—é —â–æ –≤—ñ–¥—á—É–≤–∞—é' else await QuestStep.feedback.set()

	@dp.message_handler(state=QuestStep.step2)  # –≤–ø—Ä–∞–≤–∞ 2
	async def step2(message: types.Message, state: FSMContext):  # 2 –∫–≤–µ—Å—Ç

		async with state.proxy() as data:  # —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –Ω–∞—à—É –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
			emotions = data['emotion']
			step = data['step']
		await bot.send_chat_action(message.chat.id, action='typing')

		photo = MEDIA[emotions][1]  # –æ–±–∏—Ä–∞—î–º–æ –ø–æ—Ç—Ä—ñ–±–Ω–µ —Ñ–æ—Ç–æ –ø—ñ–¥ —ñ–Ω–¥–µ–∫—Å–æ–º(1) –∑—ñ —Å–ª–æ–≤–Ω–∏–∫–∞
		await bot.send_photo(message.chat.id, photo=InputFile.from_url(photo), reply_markup=none)

		await bot.send_chat_action(message.chat.id, action='typing')
		await asyncio.sleep(2)

		await bot.send_message(message.chat.id, ALL_QUESTS[emotions][step], reply_markup=keyF)  # –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è

		if emotions == '—Ç—Ä–∏–≤–æ–≥–∞':  # –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤–æ –∞—É–¥—ñ–æ—Ñ–∞–π–ª —è–∫—â–æ –æ–±—Ä–∞–Ω–∞ '—Ç—Ä–∏–≤–æ–≥–∞'
			await bot.send_chat_action(message.chat.id, action='upload_audio')
			await asyncio.sleep(2)
			try:
				await bot.send_audio(message.chat.id, 'CQACAgIAAxkBAANCZDQqVqaPjMN8TlWfrAkDdytUG1IAAg4rAAL665FJr69UsDX_rRwvBA')
			except:
				await bot.send_message(message.chat.id, '–ù–∞ –∂–∞–ª—å –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∞—É–¥—ñ–æ—Ñ–∞–π–ª üòî \n–ê–ª–µ —Å–∫–æ—Ä–æ –º–∏ —Ü–µ –≤–∏–ø—Ä–∞–≤–∏–º–æ!')

		if emotions == '—è –Ω–µ —Ä–æ–∑—É–º—ñ—é —â–æ –≤—ñ–¥—á—É–≤–∞—é':  # –∑–º—ñ–Ω—é—î–º–æ –ª–æ–≥—ñ–∫—É –ø—Ä–∏ –≤—ñ–¥—Å—É—Ç–Ω–æ—Å—Ç—ñ –µ–º–æ—Ü—ñ—ó –æ—Å–∫—ñ–ª—å–∫–∏ —Ñ—ñ–¥–±–µ–∫ –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω
			await QuestStep.final.set() if step == 2 else await QuestStep.feedback.set()
		else:
			await QuestStep.feedback.set()

	@dp.message_handler(state=QuestStep.feedback)
	async def feedback(message: types.Message, state: FSMContext):
		async with state.proxy() as data:  # –∑–∞–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –¥–∞—Ç—É (—Å–ª–æ–≤–∞—Ä—å)
			step = data['step']

		previus_state = await emotion_state_check(step=step, user_id=message.from_user.id, message=message.text)
		await bot.send_message(message.chat.id, f'–í–ø—Ä–∞–≤–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–í–∞—à–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—è –æ—Ü—ñ–Ω–∫–∞:  <b>{previus_state}</b>', parse_mode='HTML')
		await asyncio.sleep(1)
		await bot.send_message(message.chat.id, '<b>–ü—ñ—Å–ª—è –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è –¥–∞–Ω–æ—ó —Ç–µ—Ö–Ω—ñ–∫–∏ –æ—Ü—ñ–Ω—ñ—Ç—å '
												'—è–∫ –∑–º—ñ–Ω–∏–≤—Å—è  –≤–∞—à —Å—Ç–∞–Ω –≤—ñ–¥ 1 –¥–æ 10? üíô</b>', reply_markup=keyC, parse_mode='HTML')
		await QuestStep.pre_step.set() if step < 2 else await QuestStep.final.set()

	@dp.message_handler(state=QuestStep.final)
	async def feedback(message: types.Message, state: FSMContext):
		async with state.proxy() as data:  # –∑–∞–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –¥–∞—Ç—É (—Å–ª–æ–≤–∞—Ä—å)
			step = data['step']
			emotion = data['emotion']

		# –±–ª–æ–∫ –Ω–∞ –≤–∏–ø–∞–¥–æ–∫ —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤–æ–¥–∏—Ç—å –¥–∞–Ω—ñ –Ω–µ –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏, –∞–ª–µ —Ü–µ –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ
		if message.text.isdigit() is True:
			message.text = await message_correct(message.text)  # –≤–∏–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç

		# –æ—Ç—Ä–∏–º—É—î–º–æ —Ç–∞ –æ–±—Ä–æ–±–ª—è—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –µ–º–æ—Ü—ñ–π–Ω–∏–π —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –†–æ–±–∏–º–æ –∑—Ä—ñ–∑ —Ç–∞ –ø—Ä–∏–±–∏—Ä–∞—î–º–æ –ø—Ä–æ–±—ñ–ª–∏.
		current_state = message.text if message.text[:-1].rstrip().isdigit() is True and 0 < int(message.text[:-1].rstrip()) < 11 else '0‚ùå'

		# –æ–Ω–æ–≤–ª—é—î–º–æ –±–¥
		update_table(step, emotion, current_state, datetime.now().replace(microsecond=0), message.from_user.id)

		# –æ—Ç—Ä–∏–º—É—î–º–æ –≤–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —ñ–∑ –±–¥
		state_road = await emotion_state_road(message.from_user.id)

		if emotion == '—è –Ω–µ —Ä–æ–∑—É–º—ñ—é —â–æ –≤—ñ–¥—á—É–≤–∞—é':  # —Ü—è –µ–º–æ—Ü—ñ—è –Ω–µ –º–∞—î —à–∫–∞–ª–∏ –æ—Ü—ñ–Ω–∫–∏ —Å—Ç–∞–Ω—É
			await bot.send_message(message.chat.id, '–î—è–∫—É—é —â–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–ª–∏—Å—å –Ω–∞—à–∏–º –±–æ—Ç–æ–º!', reply_markup=keyE)
			await asyncio.sleep(1)
			await bot.send_message(message.chat.id, CALL_BACK_TEXT[2], reply_markup=inl_keyR)

		elif int(state_road[0][0][:-1]) == 0 or int(state_road[0][2][:-1]) == 0:
			await bot.send_message(message.chat.id, '–ú–æ—ó —Å–µ–Ω—Å–æ—Ä–∏ –Ω–µ –º–æ–∂—É—Ç—å –ø—ñ–¥–∫–∞–∑–∞—Ç–∏ —á–∏ –∑–º—ñ–Ω–∏–≤—Å—è –≤–∞—à —Å—Ç–∞–Ω üíî\n\n'
													'–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n\n'
													f'{state_road[0][0]} <b>--></b> {state_road[0][1]} <b>--></b> {state_road[0][2]}'
													f'  <b>–Ω–µ–≤—ñ–¥–æ–º–∏–πü´•</b>', reply_markup=keyE, parse_mode='HTML')
			await asyncio.sleep(2)
			await bot.send_message(message.chat.id, CALL_BACK_TEXT[4], reply_markup=inl_keyR2)

		# —Ç–µ–∫—Å—Ç –Ω–∞ –≤–∏–ø–∞–¥–æ–∫ –∫–æ–ª–∏ –ø—Å–∏—Ö–æ–ª–æ–≥—ñ—á–Ω–∏–π —Å—Ç–∞–Ω –ø–æ–≥—ñ—Ä—à–∏–≤—Å—è
		elif int(state_road[0][0][:-1]) < int(state_road[0][2][:-1]):
			await bot.send_message(message.chat.id, '–ù–∞–∂–∞–ª—å –º–æ—ó —Å–µ–Ω—Å–æ—Ä–∏ –ø—ñ–¥–∫–∞–∑—É—é—Ç—å, —â–æ –≤–∞–º —Å—Ç–∞–ª–æ –≥—ñ—Ä—à–µ üñ§\n\n'
													'–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n\n'
													f'{state_road[0][0]} <b>--></b>  {state_road[0][1]} <b>--></b> {state_road[0][2]}'
													f'  <b>–Ω–µ–≥–∞—Ç–∏–≤–Ω–∏–π.üòî</b>', reply_markup=keyE, parse_mode='HTML')
			await asyncio.sleep(2)
			await bot.send_message(message.chat.id, CALL_BACK_TEXT[1], reply_markup=inl_keyR2)

		elif int(state_road[0][0][:-1]) > int(state_road[0][2][:-1]):  # —Ç–µ–∫—Å—Ç –Ω–∞ –≤–∏–ø–∞–¥–æ–∫ –∫–æ–ª–∏ –ø—Å–∏—Ö–æ–ª–æ–≥—ñ—á–Ω–∏–π —Å—Ç–∞–Ω –ø–æ–∫—Ä–∞—â–∏–≤—Å—è
			await bot.send_message(message.chat.id, '–ú–æ—ó —Å–µ–Ω—Å–æ—Ä–∏ –ø—ñ–¥–∫–∞–∑—É—é—Ç—å, —â–æ –≤–∞–º —Å—Ç–∞–ª–æ –∫—Ä–∞—â–µ üíô\n\n'
													'–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n\n'
													f'{state_road[0][0]} <b>--></b> {state_road[0][1]} <b>--></b> {state_road[0][2]}'
													f'  <b>–ø–æ–∑–∏—Ç–∏–≤–Ω–∏–π!üòÉ</b>', reply_markup=keyE, parse_mode='HTML')
			await asyncio.sleep(2)
			await bot.send_message(message.chat.id, CALL_BACK_TEXT[2], reply_markup=inl_keyR)

		elif int(state_road[0][0][:-1]) == int(state_road[0][2][:-1]):  # —Ç–µ–∫—Å—Ç –Ω–∞ –≤–∏–ø–∞–¥–æ–∫ –∫–æ–ª–∏ –ø—Å–∏—Ö–æ–ª–æ–≥—ñ—á–Ω–∏–π —Å—Ç–∞–Ω –Ω–µ –∑–º—ñ–Ω–∏–≤—Å—è
			await bot.send_message(message.chat.id, '–ú–æ—ó —Å–µ–Ω—Å–æ—Ä–∏ –ø—ñ–¥–∫–∞–∑—É—é—Ç—å, —â–æ —Å—Ç–∞–Ω –Ω–µ –∑–º—ñ–Ω–∏–≤—Å—è üíú\n\n'
													'–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n\n'
													f'{state_road[0][0]} <b>--></b> {state_road[0][1]} <b>--></b> {state_road[0][2]}'
													f'  <b>–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∏–πüòê</b>', reply_markup=keyE, parse_mode='HTML')
			await asyncio.sleep(2)
			await bot.send_message(message.chat.id, CALL_BACK_TEXT[3], reply_markup=inl_keyR2)

		else:
			await bot.send_message(message.chat.id, '–î—è–∫—É—é —â–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–ª–∏—Å—å –Ω–∞—à–∏–º –±–æ—Ç–æ–º!', reply_markup=keyE)
		await QuestStep.emotion.set()

	@dp.callback_query_handler(text=['techniks', 'question', 'donate', 'tech2', 'donate2', 'question2', 'techniks2'], state='*')
	async def callback_retarget(call: types.CallbackQuery):
		if call.data == 'techniks' or call.data == 'techniks2':
			await call.message.answer('–ü—ñ–¥–∫–∞–∂–∏, —â–æ —Ç–∏ –∑–∞—Ä–∞–∑ –≤—ñ–¥—á—É–≤–∞–µ—à? üíô', reply_markup=keyB)
			await QuestStep.emotion_description.set()
		elif call.data == 'question':
			await call.message.answer('–í–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –Ω–∞ –Ω–∞—à Instagram, '
									'—Ç–∞ –ø–æ—Å—Ç–∞–≤–∏—Ç–∏ –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è —É –¥—ñ—Ä–µ–∫—Ç')
			await asyncio.sleep(1)
			await call.message.answer(f'–ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è, –∫–ª—ñ–∫–∞–π ‚û° <a href="{INST_URL}">–Ω–∞—à Instagram</a>', parse_mode='HTML')
		elif call.data == 'donate':
			photo = 'https://drive.google.com/uc?id=1DTAk3e2FP0UWGWBxF3i4gdUnb89PVX0A'
			await bot.send_photo(call.from_user.id, photo)
			await asyncio.sleep(2)
			await call.message.answer(CALL_BACK_TEXT[0], parse_mode='HTML')
		elif call.data == 'tech2':
			await call.answer('üíô')
			await call.message.answer('–ú–∏ –ø–∏—à–∞—î–º–æ—Å—è –≤–∞—à–æ—é –Ω–∞–ø–æ–ª–µ–≥–ª–∏–≤—ñ—Å—Ç—é —É –≤–∏—Ä—ñ—à–µ–Ω–Ω—ñ –≤–ª–∞—Å–Ω–∏—Ö –ø–∏—Ç–∞–Ω—å '
									'—ñ –≤—ñ—Ä–∏–º–æ —â–æ —É –≤–∞—Å –≤—Å–µ –≤–∏–π–¥–µ! üíô', reply_markup=keyA)
			await QuestStep.pre_step.set()
		elif call.data == 'donate2':
			photo = 'https://drive.google.com/uc?id=1HGee7QeBu70R1bOmcq3K1vYVXy3RmGCY'
			await bot.send_photo(call.from_user.id, photo)
			await asyncio.sleep(2)
			await call.message.answer(CALL_BACK_TEXT[5], parse_mode='HTML')

	await dp.start_polling()

async def timer():  # —Ñ—É–Ω–∫—Ü—ñ—è –∫–æ—Ç—Ä–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞ —Ä–µ—Ç–∞—Ä–≥–µ—Ç —Ç–∞ –≤—ñ–¥–ª—ñ–∫ —á–∞—Å—É
	while True:
		await asyncio.sleep(10800)
		user_data = check_retarget()
		print(user_data, '>>> user_data')

		if len(user_data) > 0:
			for data in user_data:
				retarget_to_user = data[0]
				if data[1] is not None:
					ret_question = random.choice(RETARGET_QUESTIONS[data[1]])
				else:
					ret_question = random.choice(RETARGET_QUESTIONS['—è –Ω–µ —Ä–æ–∑—É–º—ñ—é —â–æ –≤—ñ–¥—á—É–≤–∞—é'])

				if data[2] != 'done':
					try:
						await bot.send_message(retarget_to_user, '<i>–í–∏–±–∞—á—Ç–µ —â–æ —Ç—É—Ä–±—É—é, –Ω–∞–≥–∞–¥—É—é —â–æ –Ω–µ—â–æ–¥–∞–≤–Ω–æ'
										'–≤–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–ª–∏—Å—è –Ω–∞—à–∏–º –±–æ—Ç–æ–º –ø—Å–∏—Ö–æ–ª–æ–≥–æ—ñ—á–Ω–æ—ó –¥–æ–ø–æ–º–æ–≥–∏ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è —Å–≤–æ–≥–æ —Å—Ç–∞–Ω—É.\n'
										'\n'
										'–ü—Ä–æ–ø–æ–Ω—É—î–º–æ –≤–∞–º –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –≤–ø—Ä–∞–≤—É, '
										f'–∞–±–æ –∑–∞–¥–∞—Ç–∏ —Å–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è —É –Ω–∞—à–æ–º—É</i> <a href="{INST_URL}">Instagram </a>'
										, parse_mode=types.ParseMode.HTML, reply_markup=inl_keyRetarget_shrt)
						print(f'shrt_retarget_done: {data}')
					except Exception as er:
						print(er)
						pass
				else:
					try:
						await bot.send_message(retarget_to_user, ret_question, reply_markup=inl_keyRetarget)
						print(f'long_retarget_done: {data}')
					except Exception as er:
						print(er)
						pass
				update_retarget(data[0], time=datetime.now().replace(microsecond=0))
				print(f'update: {data}')
		else:
			pass
		user_data.clear()
		print(f'retarget all done, data clear: {user_data}')

async def main():
	await asyncio.gather(timer(), bot_polling())

if __name__ == "__main__":
	asyncio.run(main())
